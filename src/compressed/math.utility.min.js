
/**
 * 
 * 
 * ░▒▓█▓▒░░▒▓█▓▒░░▒▓████████▓▒░░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░░▒▓████████▓▒░░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░ ░▒▓███████▓▒░
 * ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░       
 * ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░░▒▓█▓▒░       
 * ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░   ░▒▓█▓▒░     ░▒▓██████▓▒░    ░▒▓█▓▒░ ░▒▓██████▓▒░ 
 * ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░   ░▒▓█▓▒░       ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░
 * ░▒▓█▓▒░░▒▓█▓▒░   ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░   ░▒▓█▓▒░       ░▒▓█▓▒░░▒▓█▓▒░░▒▓█▓▒░       ░▒▓█▓▒░
 *  ░▒▓██████▓▒░    ░▒▓█▓▒░    ░▒▓█▓▒░░▒▓████████▓▒░░▒▓█▓▒░   ░▒▓█▓▒░       ░▒▓█▓▒░ ░▒▓██████▓▒░ ░▒▓███████▓▒░ 
 * 
 * 
 * UtilityJs | MathUtility
 * Author: pixelThreader (Piyush Rana) 
 * @license MIT License 'https://raw.githubusercontent.com/piyush20B/UtilityJS/main/LICENSE'
 * 
 * A JavaScript utility library aiming to make life easier, save code,
 * and enhance productivity with a wide range of utilities.
 * 
 */
class MathUtility{add(...r){if(2===r.length&&"number"==typeof r[0]&&"number"==typeof r[1])return r[0]+r[1];if(1===r.length&&Array.isArray(r[0]))return r[0].reduce(((r,t)=>r+t),0);throw new Error("Invalid arguments passed to add")}subtract(...r){if(2===r.length&&"number"==typeof r[0]&&"number"==typeof r[1])return r[0]-r[1];throw new Error("Invalid arguments passed to subtract")}multiply(...r){if(2===r.length&&"number"==typeof r[0]&&"number"==typeof r[1])return r[0]*r[1];if(1===r.length&&Array.isArray(r[0]))return r[0].reduce(((r,t)=>r*t),1);throw new Error("Invalid arguments passed to multiply")}divide(...r){if(2===r.length&&"number"==typeof r[0]&&"number"==typeof r[1]){if(0===r[1])throw new Error("Division by zero");return r[0]/r[1]}throw new Error("Invalid arguments passed to divide")}modulus(r,t){return r%t}exponentiation(r,t){return r**t}squareRoot(r){return Math.sqrt(r)}cubeRoot(r){return Math.cbrt(r)}factorial(r){if(r<0)throw new Error("Factorial of a negative number is not defined");if(0===r||1===r)return 1;let t=1;for(let e=2;e<=r;e++)t*=e;return t}permutations(r,t){if(r<t||r<0||t<0)throw new Error("Invalid input for permutations");return this.factorial(r)/this.factorial(r-t)}combinations(r,t){if(r<t||r<0||t<0)throw new Error("Invalid input for combinations");return this.factorial(r)/(this.factorial(t)*this.factorial(r-t))}absoluteValue(r){return Math.abs(r)}degreeToRadian(r){return r*(Math.PI/180)}radianToDegree(r){return r*(180/Math.PI)}sine(r){return Math.sin(r)}cosine(r){return Math.cos(r)}tangent(r){return Math.tan(r)}inverseSine(r){return Math.asin(r)}inverseCosine(r){return Math.acos(r)}inverseTangent(r){return Math.atan(r)}naturalLogarithm(r){return Math.log(r)}base10Logarithm(r){return Math.log10(r)}customBaseLogarithm(r,t){return Math.log(r)/Math.log(t)}exponentialGrowth(r,t,e){return r*Math.exp(t*e)}exponentialDecay(r,t,e){return r*Math.exp(-t*e)}exponentiationWithBase(r,t){return Math.pow(r,t)}uniformRandom(r,t){return Math.random()*(t-r)+r}normalRandom(r,t){let e=0,n=0;for(;0===e;)e=Math.random();for(;0===n;)n=Math.random();return r+t*(Math.sqrt(-2*Math.log(e))*Math.cos(2*Math.PI*n))}customRangeRandom(r,t,e=0){const n=Math.random()*(t-r)+r;return parseFloat(n.toFixed(e))}mean(r){if(!Array.isArray(r)||0===r.length)throw new Error("Invalid input");return r.reduce(((r,t)=>r+t),0)/r.length}median(r){if(!Array.isArray(r)||0===r.length)throw new Error("Invalid input");r.sort(((r,t)=>r-t));const t=Math.floor(r.length/2);return r.length%2==0?(r[t-1]+r[t])/2:r[t]}mode(r){if(!Array.isArray(r)||0===r.length)throw new Error("Invalid input");const t={};r.forEach((r=>{t[r]=(t[r]||0)+1}));let e=0,n=[];for(const r in t)t[r]>e?(e=t[r],n=[r]):t[r]===e&&n.push(r);return n}standardDeviation(r){if(!Array.isArray(r)||0===r.length)throw new Error("Invalid input");const t=this.mean(r),e=r.reduce(((r,e)=>r+(e-t)**2),0);return Math.sqrt(e/r.length)}variance(r){if(!Array.isArray(r)||0===r.length)throw new Error("Invalid input");const t=this.mean(r);return r.reduce(((r,e)=>r+(e-t)**2),0)/r.length}correlation(r){if(!Array.isArray(r)||r.length<2)throw new Error("Invalid input: Expected an array of arrays with at least two arrays");const t=r[0].length;if(!r.every((r=>Array.isArray(r)&&r.length===t)))throw new Error("Invalid input: All arrays must have the same length");const e=r.map((r=>this.mean(r))),n=r.length,a=[];for(let i=0;i<n;i++){a[i]=[];for(let o=0;o<n;o++)if(i===o)a[i][o]=1;else{let n=0,l=0,u=0;for(let a=0;a<t;a++)n+=(r[i][a]-e[i])*(r[o][a]-e[o]),l+=(r[i][a]-e[i])**2,u+=(r[o][a]-e[o])**2;a[i][o]=n/Math.sqrt(l*u)}}return a}covariance(r,t){if(!Array.isArray(r)||!Array.isArray(t)||r.length!==t.length||0===r.length)throw new Error("Invalid input");const e=this.mean(r),n=this.mean(t);let a=0;for(let i=0;i<r.length;i++)a+=(r[i]-e)*(t[i]-n);return a/r.length}matrixAddition(r,t){if(!Array.isArray(r)||!Array.isArray(t)||0===r.length||r.length!==t.length)throw new Error("Invalid input for matrix addition");const e=[];for(let n=0;n<r.length;n++){const a=[];for(let e=0;e<r[n].length;e++)a.push(r[n][e]+t[n][e]);e.push(a)}return e}matrixSubtraction(r,t){if(!Array.isArray(r)||!Array.isArray(t)||0===r.length||r.length!==t.length)throw new Error("Invalid input for matrix subtraction");const e=[];for(let n=0;n<r.length;n++){const a=[];for(let e=0;e<r[n].length;e++)a.push(r[n][e]-t[n][e]);e.push(a)}return e}matrixMultiplication(r,t){if(!Array.isArray(r)||!Array.isArray(t)||0===r.length||0===t.length||r[0].length!==t.length)throw new Error("Invalid input for matrix multiplication");const e=[];for(let n=0;n<r.length;n++){const a=[];for(let e=0;e<t[0].length;e++){let i=0;for(let a=0;a<t.length;a++)i+=r[n][a]*t[a][e];a.push(i)}e.push(a)}return e}matrixTranspose(r){if(!Array.isArray(r)||0===r.length)throw new Error("Invalid input for matrix transpose");const t=r.length,e=r[0].length,n=[];for(let a=0;a<e;a++){const e=[];for(let n=0;n<t;n++)e.push(r[n][a]);n.push(e)}return n}matrixInverse(r){if(!Array.isArray(r)||0===r.length||r.length!==r[0].length)throw new Error("Invalid input for matrix inverse");const t=r.length,e=this.createIdentityMatrix(t),n=this.matrixConcat(r,e);for(let r=0;r<t;r++){const e=n[r][r];for(let a=0;a<2*t;a++)n[r][a]/=e;for(let e=0;e<t;e++)if(e!==r){const a=n[e][r];for(let i=0;i<2*t;i++)n[e][i]-=a*n[r][i]}}const a=[];for(let r=0;r<t;r++)a.push(n.map((r=>r.slice(t))));return a}createIdentityMatrix(r){const t=[];for(let e=0;e<r;e++){const n=new Array(r).fill(0);n[e]=1,t.push(n)}return t}matrixConcat(r,t){if(!Array.isArray(r)||!Array.isArray(t)||0===r.length||0===t.length||r.length!==t.length)throw new Error("Invalid input for matrix concatenation");const e=[];for(let n=0;n<r.length;n++)e.push(r[n].concat(t[n]));return e}matrixDeterminant(r){if(!Array.isArray(r)||0===r.length||r.length!==r[0].length)throw new Error("Invalid input for matrix determinant");const t=r.length;if(1===t)return r[0][0];let e=0;for(let n=0;n<t;n++){const t=this.matrixMinor(r,0,n);e+=(n%2==0?1:-1)*r[0][n]*this.matrixDeterminant(t)}return e}matrixMinor(r,t,e){return r.filter(((r,e)=>e!==t)).map((r=>r.filter(((r,t)=>t!==e))))}complexAddition(r,t){return{real:r.real+t.real,imaginary:r.imaginary+t.imaginary}}complexSubtraction(r,t){return{real:r.real-t.real,imaginary:r.imaginary-t.imaginary}}complexMultiplication(r,t){return{real:r.real*t.real-r.imaginary*t.imaginary,imaginary:r.real*t.imaginary+r.imaginary*t.real}}complexDivision(r,t){const e=t.real**2+t.imaginary**2;return{real:(r.real*t.real+r.imaginary*t.imaginary)/e,imaginary:(r.imaginary*t.real-r.real*t.imaginary)/e}}complexConjugate(r){return{real:r.real,imaginary:-r.imaginary}}complexMagnitude(r){return Math.sqrt(r.real**2+r.imaginary**2)}complexPhase(r){return Math.atan2(r.imaginary,r.real)}isPrime(r){if(r<=1)return!1;if(r<=3)return!0;if(r%2==0||r%3==0)return!1;let t=5;for(;t*t<=r;){if(r%t==0||r%(t+2)==0)return!1;t+=6}return!0}primeFactors(r){if(r<=1)throw new Error("Prime factorization is not defined for numbers less than or equal to 1");const t=[];let e=2;for(;r>=e;)r%e==0?(t.push(e),r/=e):e++;return t}gcd(r,t){for(r=Math.abs(r),t=Math.abs(t);t;){const e=t;t=r%t,r=e}return r}lcm(r,t){return Math.abs(r*t)/this.gcd(r,t)}eulerTotientFunction(r){let t=r;for(let e=2;e*e<=r;++e)if(r%e==0){for(;r%e==0;)r/=e;t-=t/e}return r>1&&(t-=t/r),t}circleArea(r){return Math.PI*r**2}circlePerimeter(r){return 2*Math.PI*r}rectangleArea(r,t){return r*t}rectanglePerimeter(r,t){return 2*(r+t)}triangleArea(r,t){return.5*r*t}trianglePerimeter(r,t,e){return r+t+e}sphereVolume(r){return 4/3*Math.PI*r**3}cubeVolume(r){return r**3}cylinderVolume(r,t){return Math.PI*r**2*t}compoundInterest(r,t,e){return r*(1+t/100)**e}presentValue(r,t,e){return r/(1+t/100)**e}amortizationSchedule(r,t,e){const n=t/12/100,a=12*e,i=r*(n*(1+n)**a)/((1+n)**a-1),o=[];let l=r;for(let r=1;r<=a;r++){const t=l*n,e=i-t;l-=e,o.push({month:r,principalPayment:e,interestPayment:t,balance:Math.max(l,0)})}return o}celsiusToFahrenheit(r){return 9*r/5+32}fahrenheitToCelsius(r){return 5*(r-32)/9}celsiusToKelvin(r){return r+273.15}kelvinToCelsius(r){return r-273.15}isInfinity(r){return r===1/0||r===-1/0}isNaN(r){return Number.isNaN(r)}isInteger(r){return Number.isInteger(r)}isFloat(r){return!Number.isNaN(r)&&Number.isFinite(r)&&!Number.isInteger(r)}roundToDecimal(r,t){return Number(Math.round(r+"e"+t)+"e-"+t)}}